# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto; #some last versions calculate it automatically

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 5000;

# only log critical errors
error_log stderr crit;

pid /run/nginx.pid;

# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;

    # optimized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}

http {
    include mime.types;
    default_type application/octet-stream;

    proxy_redirect          off;
    proxy_set_header        Host                $host;
    proxy_set_header        X-Real-IP           $remote_addr;
    proxy_set_header        X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto   $scheme;
    proxy_connect_timeout   60;
    proxy_send_timeout      60;
    proxy_read_timeout      60;
    proxy_buffers           32 4k;
    proxy_buffer_size       16k;

    server_tokens off;
    server_names_hash_bucket_size 128;
    underscores_in_headers on;

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # to boost I/O on HDD we can disable access logs
    access_log stderr;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    gzip on;               # enable gzip
    gzip_http_version 1.1; # turn on gzip for http 1.1 and higher
    gzip_disable "msie6";  # IE 6 had issues with gzip
    gzip_comp_level 5;     # inc compresion level, and CPU usage
    gzip_min_length 100;   # minimal weight to gzip file
    gzip_proxied any;      # enable gzip for proxied requests (e.g. CDN)
    gzip_buffers 16 8k;    # compression buffers (if we exceed this value, disk will be used instead of RAM)
    gzip_vary on;          # add header Vary Accept-Encoding (more on that in Caching section)

    # define files which should be compressed
    gzip_types text/plain;
    gzip_types text/css;
    gzip_types application/javascript;
    gzip_types application/json;
    gzip_types application/vnd.ms-fontobject;
    gzip_types application/x-font-ttf;
    gzip_types font/opentype;
    gzip_types image/svg+xml;
    gzip_types image/x-icon;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    client_body_timeout   30;
    client_header_timeout 30;
    send_timeout          15;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    # limit the number of connections per single IP
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # # limit the number of requests for a given session
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

    # # if the request body size is more than the buffer size, then the entire (or partial)
    # # request body is written into a temporary file
    client_body_buffer_size  128k;

    # # buffer size for reading client request header -- for testing environment
    client_header_buffer_size 3m;

    # # maximum number and size of buffers for large headers to read from client request
    large_client_header_buffers 4 256k;

    # post data size
    client_max_body_size 100M;

    include /etc/nginx/conf.d/*.conf;
}
